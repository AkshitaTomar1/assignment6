Q.1. What are keywords in Python? Using the keyword library, print all the Python keywords.

Keywords in Python are reserved words that have special meanings and cannot be used as identifiers (variable names, function names, etc.). They are used to define the syntax and structure of the Python language.
You can use the keyword library to get a list of Python keywords and print them:
Copy code
import keyword
print(keyword.kwlist)
This code will print a list of all Python keywords.

Q.2. What are the rules to create variables in Python?

1.Variable names must start with a letter (a-z, A-Z) or an underscore (_).
2.The rest of the variable name can contain letters, numbers, and underscores.
3.Variable names are case-sensitive.
4.Keywords cannot be used as variable names.

Q.3. What are the standards and conventions followed for the nomenclature of variables in Python to improve code readability and maintainability?

1.Use descriptive names that indicate the purpose or content of the variable.
2.Variable names should be in lowercase with words separated by underscores.
3.Avoid using single-character names unless it's a loop variable.

Q.4. What will happen if a keyword is used as a variable name?

If a keyword is used as a variable name, it will result in a syntax error. Keywords are reserved for specific purposes in Python, and using them as identifiers (variable names, function names, etc.) is not allowed.

Q.5. For what purpose is the def keyword used?

The def keyword is used to define a function in Python. The def keyword is followed by the function name and a pair of parentheses, which may include parameters. 

Q.6. What is the operation of the special character ‘\’?

The backslash (\) in Python is used as an escape character. It is used to escape special characters, indicating that the next character should be treated literally. For example, \n represents a newline character, and \\ represents a literal backslash.

Q.7. Give an example of the following conditions:

 (i) Homogeneous list
homogeneous_list = [1, 2, 3, 4, 5]

 (ii) Heterogeneous set
heterogeneous_set = {1, 'apple', 3.14, True}

 (iii) Homogeneous tuple
homogeneous_tuple = (10, 20, 30, 40, 50)

Q.8. Explain mutable and immutable data types with proper explanation & examples.

Mutable data types: Objects of mutable data types can be modified after creation. Changes to the object will affect all references to that object.
Example: Lists (list) and Dictionaries (dict) are mutable.
         my_list = [1, 2, 3]
         my_list[0] = 10
         print(my_list)         #    Output: [10, 2, 3]
Immutable data types: Objects of immutable data types cannot be modified after creation. If you want to modify the value, a new object must be created.
Example: Strings (str) and Tuples (tuple) are immutable.
         my_string = "Hello"
         # The following line will result in an error since strings are immutable.
         # my_string[0] = 'C'
         
Q.9. Write code to create the given structure using only a for loop.
*
***
*****
*******
*********

for i in range(1, 6):
    print('*' * (2 * i - 1))




Q.10. Write code to create the given structure using a while loop.

||||||||
|||||
|||
|


row = 7
while row >= 1:
    print('|' * row)
    row -= 2

